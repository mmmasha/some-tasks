https://leetcode.com/problems/top-k-frequent-words/
struct comparator{
  bool operator() (pair<string, int>p1, pair<string, int>p2){
      if(p1.second == p2.second)
          return p1.first > p2.first;
      return p1.second < p2.second;
  } 
};
class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        priority_queue<pair<string, int>, vector<pair<string, int>>, comparator>pq;
        map<string, int>mp;
        for(string word: words){
            if (!mp.count(word)){
                mp.insert(make_pair(word, 1));
            }
            else mp[word] += 1;
        }
        for(auto p: mp){
            pq.push(make_pair(p.first, p.second));
        }
        vector<string>ans;
        for(int i = 0; i < k; i++){
            ans.push_back(pq.top().first);
            pq.pop();
        }
        return ans;
    }
};
